
name: Pack & Publish (Utilities Packages)

on:
  push:
    tags:
      - 'utilities-*-v*'   # e.g., utilities-core-v1.0.0
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  pack-publish:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore

      - name: Build & Test
        run: |
          dotnet build -c Release --no-restore
          dotnet test -c Release --no-build

      - name: Determine project from tag
        id: proj
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          if ($tag -notmatch '^utilities-(.+)-v(.+)$') { throw "Bad tag format: $tag (expected utilities-<key>-v<version>)" }
          $name = $Matches[1].ToLowerInvariant()
          $version = $Matches[2]
          $map = @{
            "core"          = "src/EagleViewEnt.Utilities/Core/EagleViewEnt.Utilities.Core.csproj"
            "data"          = "src/EagleViewEnt.Utilities/Data/EagleViewEnt.Utilities.Data.csproj"
            "external"      = "src/EagleViewEnt.Utilities/External/EagleViewEnt.Utilities.External.csproj"
            "localization"  = "src/EagleViewEnt.Utilities/Localization/EagleViewEnt.Utilities.Localization.csproj"
            "media"         = "src/EagleViewEnt.Utilities/Media/EagleViewEnt.Utilities.Media.csproj"
            "security"      = "src/EagleViewEnt.Utilities/Security/EagleViewEnt.Utilities.Security.csproj"
            "serialization" = "src/EagleViewEnt.Utilities/Serialization/EagleViewEnt.Utilities.Serialization.csproj"
            "windows"       = "src/EagleViewEnt.Utilities/Windows/EagleViewEnt.Utilities.Windows.csproj"
            "testing"       = "src/EagleViewEnt.Utilities/Utilities.Testing/EagleViewEnt.Utilities.Testing.csproj"
          }
          if (-not $map.ContainsKey($name)) { throw "Unknown package key: $name" }
          "proj=$($map[$name])" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "version=$version"   | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Pack (Release)
        run: dotnet pack "${{ steps.proj.outputs.proj }}" -c Release -o .\artifacts\packages /p:Version=${{ steps.proj.outputs.version }}

      - name: Push to GitHub Packages
        run: |
          for %%f in (.rtifacts\packages\*.nupkg) do dotnet nuget push "%%f" --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate
          for %%f in (.rtifacts\packages\*.snupkg) do dotnet nuget push "%%f" --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate
        shell: cmd
